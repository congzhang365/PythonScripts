import re
import pandas as pd
import os
from praatio import tgio



def make_dict(categ):
    new_dict = dict(categ.values)
    return new_dict



if __name__=='__main__':
    # get dictionary info
    data = pd.read_csv('C:/Users/sprin/SPRINT Dropbox/Academic Research/Related_Projects/Comparison_Study/Full/Analysis/vowel/clap_diff.csv')
    diff_avr = data.iloc[:, [1, 10]]
    diff_zd = data.iloc[:, [1, 11]]
    diff_zr = data.iloc[:, [1, 12]]

    # print(diff_avr)

    # make dictionaries
    dict_avr = make_dict(diff_avr)
    dict_zd = make_dict(diff_zd)
    dict_zr = make_dict(diff_zr)
    # print(dict_avr)

    input_dir = "C:/Users/sprin/SPRINT Dropbox/Academic Research/Related_Projects/Comparison_Study/Full/Processed_Data/cut/vowel-level/archive/H6"
    output_dir = "C:/Users/sprin/SPRINT Dropbox/Academic Research/Related_Projects/Comparison_Study/Full/Processed_Data/cut/vowel-level/archive/Others"

    for f in os.listdir(input_dir):
        if f.endswith(".TextGrid"):
            # print(f[:-9])
            filename = f.split('_')
            # print(filename)
            avr_name = '_'.join([filename[0], "AVR", filename[2], filename[3]])
            zd_name = '_'.join([filename[0], "Zoom-default", filename[2], filename[3]])
            zr_name = '_'.join([filename[0], "Zoom-raw", filename[2], filename[3]])
            # print(new_name)

            avr_gap = dict_avr[f[:-9]]
            zd_gap = dict_zd[f[:-9]]
            zr_gap = dict_zr[f[:-9]]
            # print(avr_gap)
            avr_tg = tgio.openTextgrid(os.path.join(input_dir, f))
            avr_moddedTG = avr_tg.editTimestamps(avr_gap)
            avr_moddedTG.save(os.path.join(output_dir, avr_name))

            zd_tg = tgio.openTextgrid(os.path.join(input_dir, f))
            zd_moddedTG = zd_tg.editTimestamps(zd_gap)
            zd_moddedTG.save(os.path.join(output_dir, zd_name))

            zr_tg = tgio.openTextgrid(os.path.join(input_dir, f))
            zr_moddedTG = zr_tg.editTimestamps(zr_gap)
            zr_moddedTG.save(os.path.join(output_dir, zr_name))


'''
Dr. Cong Zhang @SPRINT, Radboud University
11 March 2021

This script is to generate new textgrid files according to a baseline file (H6 in this case)

Methods:
1. Auto detect the start of harmonic in Praat: "detect spectrogram start - no tg.praat":
    - To Harmonicity (cc): 0.01, 75, 0.01, 1
    - detect the time point where harmonicity becomes > 0 and mark in point tier 
    - Input: sound files
    - Output: TextGrid files (1 point tier, 1 point per file)
2. Manually correct the points the point tier to align with the the onset of the clap
    - Input: TextGrid and wav files
    - Output: corrected TextGrid files
3. Extract time points from point tier: "Collect point tier.praat"
    - Input: corrected TextGrid files
    - Output: a csv file
4. Clean data frame in R: "clap.R"
    - Input: csv file generated by praat script
    - Output: processed csv file used in this script
5. Generate matching TextGrids for comparison groups (AVR, ZD, ZR in this case) using baseline annotation (H6 in this case)
    - Input: H6 annotation TextGrids (manually corrected) and the processed csv file from the previous step
    - Output: TextGrdid files for comparison groups
'''
